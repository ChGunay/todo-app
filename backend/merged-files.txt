
// config.js

require('dotenv').config();

module.exports = {
  PORT: process.env.PORT || 4000,
  MONGO_URI: process.env.MONGO_URI,
  JWT_SECRET: process.env.JWT_SECRET
};


// authController.js
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { JWT_SECRET } = require('../config/config');

// Kullanıcı giriş (login)
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if(!email || !password){
      return res.status(400).json({ message: 'Email ve şifre gereklidir.' });
    }

    const user = await User.findOne({ email });
    if(!user){
      return res.status(401).json({ message: 'E-posta adresi bulunamadı.' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if(!isMatch){
      return res.status(401).json({ message: 'Yanlış şifre.' });
    }

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1d' });
    res.json({
      message: 'Giriş başarılı.',
      token
    });
  } catch (error) {
    console.error('Login hata:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı kayıt (register)
exports.register = async (req, res) => {
  try {
    const { email, password } = req.body;
    if(!email || !password){
      return res.status(400).json({ message: 'Email ve şifre gereklidir.' });
    }

    const existingUser = await User.findOne({ email });
    if(existingUser){
      return res.status(400).json({ message: 'Bu e-posta adresi zaten kayıtlı.' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      email,
      password: hashedPassword
    });
    await newUser.save();

    res.status(201).json({ message: 'Kullanıcı başarıyla oluşturuldu.' });
  } catch (error) {
    console.error('Register hata:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// categoryController.js
const Category = require('../models/Category');

// Kategori oluştur
exports.createCategory = async (req, res) => {
  try {
    const { name } = req.body;
    if(!name){
      return res.status(400).json({ message: 'Kategori ismi gereklidir.' });
    }
    const existing = await Category.findOne({ name });
    if(existing){
      return res.status(400).json({ message: 'Bu kategori zaten var.' });
    }
    const category = new Category({ name });
    await category.save();
    res.status(201).json(category);
  } catch (error) {
    console.error('Kategori oluşturma hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategorileri listele
exports.getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find();
    res.json(categories);
  } catch (error) {
    console.error('Kategori listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori getir
exports.getCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const category = await Category.findById(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    res.json(category);
  } catch (error) {
    console.error('Kategori getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori güncelle
exports.updateCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const { name } = req.body;
    const category = await Category.findById(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    if(name !== undefined){
      category.name = name;
    }
    await category.save();
    res.json({ message: 'Kategori güncellendi.' });
  } catch (error) {
    console.error('Kategori güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori sil
exports.deleteCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const category = await Category.findByIdAndDelete(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    res.json({ message: 'Kategori silindi.' });
  } catch (error) {
    console.error('Kategori silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// taskController.js
const Task = require('../models/Task');
const Category = require('../models/Category');

// Yeni görev oluştur
exports.createTask = async (req, res) => {
  try {
    const { title, description, categories } = req.body;
    const task = new Task({
      title,
      description,
      categories
    });
    await task.save();
    res.status(201).json(task);
  } catch (error) {
    console.error('Görev oluşturma hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görevleri listele
exports.getAllTasks = async (req, res) => {
  try {
    const tasks = await Task.find().populate('categories');
    res.json(tasks);
  } catch (error) {
    console.error('Görev listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Tek görev getir
exports.getTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const task = await Task.findById(taskId).populate('categories');
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    res.json(task);
  } catch (error) {
    console.error('Görev getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görev güncelle
exports.updateTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const { title, description, categories } = req.body;
    const task = await Task.findById(taskId);
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    if (title !== undefined) {
      task.title = title;
    }
    if (description !== undefined) {
      task.description = description;
    }
    if (categories !== undefined){
      task.categories = categories;
    }
    task.updatedAt = Date.now();
    await task.save();
    res.json(task);
  } catch (error) {
    console.error('Görev güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görev sil
exports.deleteTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const task = await Task.findByIdAndDelete(taskId);
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    res.json({ message: 'Görev silindi.' });
  } catch (error) {
    console.error('Görev silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// userController.js
const bcrypt = require('bcrypt');
const User = require('../models/User');

// Tüm kullanıcıları listele
exports.getAllUsers = async (req, res) => {
  try {
    // Parolayı listelemeden gönderelim (select -password)
    const users = await User.find().select('-password');
    res.json(users);
  } catch (error) {
    console.error('Kullanıcı listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı bilgisi getir
exports.getUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const user = await User.findById(userId).select('-password');
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    res.json(user);
  } catch (error) {
    console.error('Kullanıcı getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı güncelle (örn. parola değiştirme)
exports.updateUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const { password } = req.body;

    const user = await User.findById(userId);
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }

    // Parola güncelle
    if(password){
      user.password = await bcrypt.hash(password, 10);
    }
    await user.save();
    res.json({ message: 'Kullanıcı güncellendi.' });
  } catch (error) {
    console.error('Kullanıcı güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı sil
exports.deleteUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const user = await User.findByIdAndDelete(userId);
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    res.json({ message: 'Kullanıcı silindi.' });
  } catch (error) {
    console.error('Kullanıcı silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// merged-files.txt

// config.js

require('dotenv').config();

module.exports = {
  PORT: process.env.PORT || 4000,
  MONGO_URI: process.env.MONGO_URI,
  JWT_SECRET: process.env.JWT_SECRET
};


// authController.js
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { JWT_SECRET } = require('../config/config');

// Kullanıcı giriş (login)
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if(!email || !password){
      return res.status(400).json({ message: 'Email ve şifre gereklidir.' });
    }

    const user = await User.findOne({ email });
    if(!user){
      return res.status(401).json({ message: 'E-posta adresi bulunamadı.' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if(!isMatch){
      return res.status(401).json({ message: 'Yanlış şifre.' });
    }

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1d' });
    res.json({
      message: 'Giriş başarılı.',
      token
    });
  } catch (error) {
    console.error('Login hata:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı kayıt (register)
exports.register = async (req, res) => {
  try {
    const { email, password } = req.body;
    if(!email || !password){
      return res.status(400).json({ message: 'Email ve şifre gereklidir.' });
    }

    const existingUser = await User.findOne({ email });
    if(existingUser){
      return res.status(400).json({ message: 'Bu e-posta adresi zaten kayıtlı.' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      email,
      password: hashedPassword
    });
    await newUser.save();

    res.status(201).json({ message: 'Kullanıcı başarıyla oluşturuldu.' });
  } catch (error) {
    console.error('Register hata:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// categoryController.js
const Category = require('../models/Category');

// Kategori oluştur
exports.createCategory = async (req, res) => {
  try {
    const { name } = req.body;
    if(!name){
      return res.status(400).json({ message: 'Kategori ismi gereklidir.' });
    }
    const existing = await Category.findOne({ name });
    if(existing){
      return res.status(400).json({ message: 'Bu kategori zaten var.' });
    }
    const category = new Category({ name });
    await category.save();
    res.status(201).json(category);
  } catch (error) {
    console.error('Kategori oluşturma hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategorileri listele
exports.getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find();
    res.json(categories);
  } catch (error) {
    console.error('Kategori listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori getir
exports.getCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const category = await Category.findById(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    res.json(category);
  } catch (error) {
    console.error('Kategori getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori güncelle
exports.updateCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const { name } = req.body;
    const category = await Category.findById(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    if(name !== undefined){
      category.name = name;
    }
    await category.save();
    res.json({ message: 'Kategori güncellendi.' });
  } catch (error) {
    console.error('Kategori güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kategori sil
exports.deleteCategory = async (req, res) => {
  try {
    const categoryId = req.params.categoryId;
    const category = await Category.findByIdAndDelete(categoryId);
    if(!category){
      return res.status(404).json({ message: 'Kategori bulunamadı.' });
    }
    res.json({ message: 'Kategori silindi.' });
  } catch (error) {
    console.error('Kategori silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// taskController.js
const Task = require('../models/Task');
const Category = require('../models/Category');

// Yeni görev oluştur
exports.createTask = async (req, res) => {
  try {
    const { title, description, categories } = req.body;
    const task = new Task({
      title,
      description,
      categories
    });
    await task.save();
    res.status(201).json(task);
  } catch (error) {
    console.error('Görev oluşturma hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görevleri listele
exports.getAllTasks = async (req, res) => {
  try {
    const tasks = await Task.find().populate('categories');
    res.json(tasks);
  } catch (error) {
    console.error('Görev listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Tek görev getir
exports.getTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const task = await Task.findById(taskId).populate('categories');
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    res.json(task);
  } catch (error) {
    console.error('Görev getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görev güncelle
exports.updateTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const { title, description, categories } = req.body;
    const task = await Task.findById(taskId);
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    if (title !== undefined) {
      task.title = title;
    }
    if (description !== undefined) {
      task.description = description;
    }
    if (categories !== undefined){
      task.categories = categories;
    }
    task.updatedAt = Date.now();
    await task.save();
    res.json(task);
  } catch (error) {
    console.error('Görev güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Görev sil
exports.deleteTask = async (req, res) => {
  try {
    const taskId = req.params.taskId;
    const task = await Task.findByIdAndDelete(taskId);
    if(!task){
      return res.status(404).json({ message: 'Görev bulunamadı.' });
    }
    res.json({ message: 'Görev silindi.' });
  } catch (error) {
    console.error('Görev silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};


// userController.js
const bcrypt = require('bcrypt');
const User = require('../models/User');

// Tüm kullanıcıları listele
exports.getAllUsers = async (req, res) => {
  try {
    // Parolayı listelemeden gönderelim (select -password)
    const users = await User.find().select('-password');
    res.json(users);
  } catch (error) {
    console.error('Kullanıcı listeleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı bilgisi getir
exports.getUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const user = await User.findById(userId).select('-password');
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    res.json(user);
  } catch (error) {
    console.error('Kullanıcı getirme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı güncelle (örn. parola değiştirme)
exports.updateUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const { password } = req.body;

    const user = await User.findById(userId);
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }

    // Parola güncelle
    if(password){
      user.password = await bcrypt.hash(password, 10);
    }
    await user.save();
    res.json({ message: 'Kullanıcı güncellendi.' });
  } catch (error) {
    console.error('Kullanıcı güncelleme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};

// Kullanıcı sil
exports.deleteUser = async (req, res) => {
  try {
    const userId = req.params.userId;
    const user = await User.findByIdAndDelete(userId);
    if(!user){
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    res.json({ message: 'Kullanıcı silindi.' });
  } catch (error) {
    console.error('Kullanıcı silme hatası:', error);
    res.status(500).json({ message: 'Sunucu hatası.' });
  }
};



// authMiddleware.js
const jwt = require('jsonwebtoken');
const { JWT_SECRET } = require('../config/config');

// Token doğrulama
exports.verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if(!authHeader){
    return res.status(401).json({ message: 'Erişim reddedildi. Token gerekli.' });
  }

  const token = authHeader.split(' ')[1];
  if(!token){
    return res.status(401).json({ message: 'Token bulunamadı.' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Geçersiz token.' });
  }
};


// Category.js
const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('Category', categorySchema);


// Task.js
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String
  },
  categories: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Category'
    }
  ],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date
  }
});

module.exports = mongoose.model('Task', taskSchema);


// User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('User', userSchema);


// .config.nodes.json
{
    "node-red": {
        "name": "node-red",
        "version": "4.0.8",
        "local": false,
        "user": false,
        "nodes": {
            "junction": {
                "name": "junction",
                "types": [
                    "junction"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/05-junction.js"
            },
            "inject": {
                "name": "inject",
                "types": [
                    "inject"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/20-inject.js"
            },
            "debug": {
                "name": "debug",
                "types": [
                    "debug"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/21-debug.js"
            },
            "complete": {
                "name": "complete",
                "types": [
                    "complete"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/24-complete.js"
            },
            "catch": {
                "name": "catch",
                "types": [
                    "catch"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/25-catch.js"
            },
            "status": {
                "name": "status",
                "types": [
                    "status"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/25-status.js"
            },
            "link": {
                "name": "link",
                "types": [
                    "link in",
                    "link out",
                    "link call"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/60-link.js"
            },
            "comment": {
                "name": "comment",
                "types": [
                    "comment"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/90-comment.js"
            },
            "global-config": {
                "name": "global-config",
                "types": [
                    "global-config"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/91-global-config.js"
            },
            "unknown": {
                "name": "unknown",
                "types": [
                    "unknown"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/common/98-unknown.js"
            },
            "function": {
                "name": "function",
                "types": [
                    "function"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/10-function.js"
            },
            "switch": {
                "name": "switch",
                "types": [
                    "switch"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/10-switch.js"
            },
            "change": {
                "name": "change",
                "types": [
                    "change"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/15-change.js"
            },
            "range": {
                "name": "range",
                "types": [
                    "range"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/16-range.js"
            },
            "template": {
                "name": "template",
                "types": [
                    "template"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/80-template.js"
            },
            "delay": {
                "name": "delay",
                "types": [
                    "delay"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/89-delay.js"
            },
            "trigger": {
                "name": "trigger",
                "types": [
                    "trigger"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/89-trigger.js"
            },
            "exec": {
                "name": "exec",
                "types": [
                    "exec"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/90-exec.js"
            },
            "rbe": {
                "name": "rbe",
                "types": [
                    "rbe"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/function/rbe.js"
            },
            "tls": {
                "name": "tls",
                "types": [
                    "tls-config"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/05-tls.js"
            },
            "httpproxy": {
                "name": "httpproxy",
                "types": [
                    "http proxy"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/06-httpproxy.js"
            },
            "mqtt": {
                "name": "mqtt",
                "types": [
                    "mqtt in",
                    "mqtt out",
                    "mqtt-broker"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/10-mqtt.js"
            },
            "httpin": {
                "name": "httpin",
                "types": [
                    "http in",
                    "http response"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/21-httpin.js"
            },
            "httprequest": {
                "name": "httprequest",
                "types": [
                    "http request"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/21-httprequest.js"
            },
            "websocket": {
                "name": "websocket",
                "types": [
                    "websocket in",
                    "websocket out",
                    "websocket-listener",
                    "websocket-client"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/22-websocket.js"
            },
            "tcpin": {
                "name": "tcpin",
                "types": [
                    "tcp in",
                    "tcp out",
                    "tcp request"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/31-tcpin.js"
            },
            "udp": {
                "name": "udp",
                "types": [
                    "udp in",
                    "udp out"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/network/32-udp.js"
            },
            "CSV": {
                "name": "CSV",
                "types": [
                    "csv"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/parsers/70-CSV.js"
            },
            "HTML": {
                "name": "HTML",
                "types": [
                    "html"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/parsers/70-HTML.js"
            },
            "JSON": {
                "name": "JSON",
                "types": [
                    "json"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/parsers/70-JSON.js"
            },
            "XML": {
                "name": "XML",
                "types": [
                    "xml"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/parsers/70-XML.js"
            },
            "YAML": {
                "name": "YAML",
                "types": [
                    "yaml"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/parsers/70-YAML.js"
            },
            "split": {
                "name": "split",
                "types": [
                    "split",
                    "join"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/sequence/17-split.js"
            },
            "sort": {
                "name": "sort",
                "types": [
                    "sort"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/sequence/18-sort.js"
            },
            "batch": {
                "name": "batch",
                "types": [
                    "batch"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/sequence/19-batch.js"
            },
            "file": {
                "name": "file",
                "types": [
                    "file",
                    "file in"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/storage/10-file.js"
            },
            "watch": {
                "name": "watch",
                "types": [
                    "watch"
                ],
                "enabled": true,
                "local": false,
                "user": false,
                "module": "node-red",
                "file": "/Users/cagrihangunay/Desktop/assigment/backend/node_modules/@node-red/nodes/core/storage/23-watch.js"
            }
        }
    }
}

// .config.runtime.json
{
    "instanceId": "766734efc8dee855",
    "_credentialSecret": "abc076e6a2801b1760d8fa79c54c861fe4fc8c3a4807c19e4f851e994a23f970"
}

// .config.runtime.json.backup
{
    "instanceId": "766734efc8dee855"
}

// .config.users.json
{
    "_": {
        "editor": {
            "view": {
                "view-store-zoom": false,
                "view-store-position": false,
                "view-show-grid": true,
                "view-snap-grid": true,
                "view-grid-size": 20,
                "view-node-status": true,
                "view-node-show-label": true,
                "view-show-tips": true,
                "view-show-welcome-tours": true
            },
            "tours": {
                "welcome": "4.0.8"
            }
        }
    }
}

// .config.users.json.backup
{
    "_": {
        "editor": {
            "view": {
                "view-store-zoom": false,
                "view-store-position": false,
                "view-show-grid": true,
                "view-snap-grid": true,
                "view-grid-size": 20,
                "view-node-status": true,
                "view-node-show-label": true,
                "view-show-tips": true,
                "view-show-welcome-tours": true
            }
        }
    }
}

// .flows.json.backup
[{"id":"01f161b867f1f598","type":"tab","label":"Node-RED CRUD Example","disabled":false,"info":"Bu flow, Todo projesi için Categories CRUD işlemlerini göstermektedir."},{"id":"33eadf9dd665aa58","type":"http in","z":"01f161b867f1f598","name":"Get Categories","url":"/node-red/categories","method":"get","upload":false,"swaggerDoc":"","x":160,"y":100,"wires":[["cce45962a5afcc52"]]},{"id":"cce45962a5afcc52","type":"function","z":"01f161b867f1f598","name":"Set GET Req Headers","func":"// Eğer token'ı sabit bir değişkenle eklemek istiyorsanız:\nmsg.headers = msg.headers || {};\nmsg.headers[\"Content-Type\"] = \"application/json\";\n\n\nconst myToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc1MWZlNmMyYjY2NjAyODAzZmJlY2EiLCJpYXQiOjE3MzU3MjkxMzMsImV4cCI6MTczNTgxNTUzM30.bLygZgcxIqS16SCY0-cQ3W84yaCqwUuthV7In9yuSzU\";\n\n// Ve Authorization başlığını ekleyelim:\nmsg.headers[\"Authorization\"] = \"Bearer \" + myToken;\n\n// API url\nmsg.url = \"http://localhost:4000/api/categories\";\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":100,"wires":[["a13959b5d93932ad"]]},{"id":"a13959b5d93932ad","type":"http request","z":"01f161b867f1f598","name":"Call GET /api/categories","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":610,"y":100,"wires":[["50bc06139944b409"]]},{"id":"50bc06139944b409","type":"http response","z":"01f161b867f1f598","name":"Return Categories","statusCode":"","headers":{},"x":860,"y":100,"wires":[]},{"id":"ec580f6bd141bb90","type":"http in","z":"01f161b867f1f598","name":"Create Category","url":"/node-red/categories","method":"post","upload":false,"swaggerDoc":"","x":160,"y":200,"wires":[["e1caf4222217bd0f"]]},{"id":"e1caf4222217bd0f","type":"function","z":"01f161b867f1f598","name":"Set POST Body & Headers","func":"// Node-RED'de default olarak body parsing aktif değilse, 'Body Parser Middleware' veya\n// http in Node'unun 'request payload' ayarlarını açmanız gerekebilir.\n\nmsg.headers = msg.headers || {};\nmsg.headers['Content-Type'] = 'application/json';\n\nconst myToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc1MWZlNmMyYjY2NjAyODAzZmJlY2EiLCJpYXQiOjE3MzU3MjkxMzMsImV4cCI6MTczNTgxNTUzM30.bLygZgcxIqS16SCY0-cQ3W84yaCqwUuthV7In9yuSzU\";\nmsg.headers['Authorization'] = 'Bearer ' + myToken;\n\n// Varsayılan API URL\nmsg.url = \"http://localhost:4000/api/categories\";\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":200,"wires":[["4d80dd6256cf7858"]]},{"id":"4d80dd6256cf7858","type":"http request","z":"01f161b867f1f598","name":"Call POST /api/categories","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":640,"y":200,"wires":[["dc45592d67f15397"]]},{"id":"dc45592d67f15397","type":"http response","z":"01f161b867f1f598","name":"Return Created Category","statusCode":"","headers":{},"x":890,"y":200,"wires":[]}]

// flows.json
[{"id":"01f161b867f1f598","type":"tab","label":"Node-RED CRUD Example","disabled":false,"info":"Bu flow, Todo projesi için Categories CRUD işlemlerini göstermektedir."},{"id":"33eadf9dd665aa58","type":"http in","z":"01f161b867f1f598","name":"Get Categories","url":"/node-red/categories","method":"get","upload":false,"swaggerDoc":"","x":160,"y":100,"wires":[["cce45962a5afcc52"]]},{"id":"cce45962a5afcc52","type":"function","z":"01f161b867f1f598","name":"Set GET Req Headers","func":"// Eğer token'ı sabit bir değişkenle eklemek istiyorsanız:\nmsg.headers = msg.headers || {};\nmsg.headers[\"Content-Type\"] = \"application/json\";\n\n\nconst myToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc1MWZlNmMyYjY2NjAyODAzZmJlY2EiLCJpYXQiOjE3MzU3MjkxMzMsImV4cCI6MTczNTgxNTUzM30.bLygZgcxIqS16SCY0-cQ3W84yaCqwUuthV7In9yuSzU\";\n\n// Ve Authorization başlığını ekleyelim:\nmsg.headers[\"Authorization\"] = \"Bearer \" + myToken;\n\n// API url\nmsg.url = \"http://localhost:4000/api/categories\";\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":100,"wires":[["a13959b5d93932ad"]]},{"id":"a13959b5d93932ad","type":"http request","z":"01f161b867f1f598","name":"Call GET /api/categories","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":610,"y":100,"wires":[["50bc06139944b409"]]},{"id":"50bc06139944b409","type":"http response","z":"01f161b867f1f598","name":"Return Categories","statusCode":"","headers":{},"x":860,"y":100,"wires":[]},{"id":"ec580f6bd141bb90","type":"http in","z":"01f161b867f1f598","name":"Create Category","url":"/node-red/categories","method":"post","upload":false,"swaggerDoc":"","x":160,"y":200,"wires":[["e1caf4222217bd0f"]]},{"id":"e1caf4222217bd0f","type":"function","z":"01f161b867f1f598","name":"Set POST Body & Headers","func":"\nmsg.headers = msg.headers || {};\nmsg.headers['Content-Type'] = 'application/json';\n\nconst myToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc1MWZlNmMyYjY2NjAyODAzZmJlY2EiLCJpYXQiOjE3MzU3MjkxMzMsImV4cCI6MTczNTgxNTUzM30.bLygZgcxIqS16SCY0-cQ3W84yaCqwUuthV7In9yuSzU\";\nmsg.headers['Authorization'] = 'Bearer ' + myToken;\n\n// Varsayılan API URL\nmsg.url = \"http://localhost:4000/api/categories\";\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":200,"wires":[["4d80dd6256cf7858"]]},{"id":"4d80dd6256cf7858","type":"http request","z":"01f161b867f1f598","name":"Call POST /api/categories","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":640,"y":200,"wires":[["dc45592d67f15397"]]},{"id":"dc45592d67f15397","type":"http response","z":"01f161b867f1f598","name":"Return Created Category","statusCode":"","headers":{},"x":890,"y":200,"wires":[]}]

// flows_cred.json
{"$":"e762c70a659a81492ddca3b7ba615503BF+7cro12XezUxTyESNHaFUq6wWkMNVSVrP7lcktEVNEgYUNqAzwMInLEszX"}

// authRoutes.js

const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/login', authController.login);
router.post('/register', authController.register);

module.exports = router;


// categoryRoutes.js

const express = require('express');
const router = express.Router();
const categoryController = require('../controllers/categoryController');
const { verifyToken } = require('../middlewares/authMiddleware');

router.post('/', verifyToken, categoryController.createCategory);
router.get('/', verifyToken, categoryController.getAllCategories);
router.get('/:categoryId', verifyToken, categoryController.getCategory);
router.put('/:categoryId', verifyToken, categoryController.updateCategory);
router.delete('/:categoryId', verifyToken, categoryController.deleteCategory);

module.exports = router;


// taskRoutes.js

const express = require('express');
const router = express.Router();
const taskController = require('../controllers/taskController');
const { verifyToken } = require('../middlewares/authMiddleware');

router.post('/', verifyToken, taskController.createTask);
router.get('/', verifyToken, taskController.getAllTasks);
router.get('/:taskId', verifyToken, taskController.getTask);
router.put('/:taskId', verifyToken, taskController.updateTask);
router.delete('/:taskId', verifyToken, taskController.deleteTask);

module.exports = router;


// userRoutes.js

const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const { verifyToken } = require('../middlewares/authMiddleware');

// Sadece login olmuş kullanıcılar (JWT Token) işlem yapabilsin
router.get('/', verifyToken, userController.getAllUsers);
router.get('/:userId', verifyToken, userController.getUser);
router.put('/:userId', verifyToken, userController.updateUser);
router.delete('/:userId', verifyToken, userController.deleteUser);

module.exports = router;


// server.js
require('dotenv').config();
const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
const cors = require('cors');
const RED = require('node-red');

const { PORT, MONGO_URI } = require('./config/config');
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const taskRoutes = require('./routes/taskRoutes');
const categoryRoutes = require('./routes/categoryRoutes');

const app = express();

// Middleware'ler
app.use(cors());
app.use(express.json());

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/categories', categoryRoutes);

// Node-RED entegrasyonu için server oluştur
const server = http.createServer(app);

// Node-RED ayarları
const settings = {
  httpAdminRoot: "/red",                 // Node-RED editör arayüzü
  httpNodeRoot: "/api",                 // Node-RED flow endpointleri
  adminAuth: null,
  userDir: __dirname + "/nodered_data",
  flowFile: __dirname + "/nodered_data/flows.json",
};

// Node-RED'i başlat
RED.init(server, settings);

// Node-RED admin ve node endpoint'lerini kullanıma aç
app.use(settings.httpAdminRoot, RED.httpAdmin);
app.use(settings.httpNodeRoot, RED.httpNode);

mongoose
  .connect(MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  })
  .then(() => {
    console.log("MongoDB'ye başarıyla bağlanıldı.");
    server.listen(PORT, () => {
      console.log(`Sunucu çalışıyor => http://localhost:${PORT}`);
      // Node-RED başlat
      RED.start();
    });
  })
  .catch((err) => {
    console.error('Veritabanına bağlanırken hata oluştu:', err);
  });

